/**
 * Copyright (C) 2024-2025 Scott Velez
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.using Microsoft.CodeAnalysis;
**/

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Channels;
using System.Threading.Tasks;

namespace SVappsLAB.iRacingTelemetrySDK
{
    /// <summary>
    /// Represents a telemetry client for iRacing.
    /// </summary>
    /// <typeparam name="T">The 'TelemetryData' type generated by the 'RequiredTelemetryVars' attribute</typeparam>
    public interface ITelemetryClient<T> : IDisposable, IAsyncDisposable where T : struct
    {
        /// <summary>
        /// Gets a channel reader for connection state changes.
        /// </summary>
        ChannelReader<ConnectStateChangedEventArgs> ConnectStateStream { get; }

        /// <summary>
        /// Gets a channel reader for error notifications.
        /// </summary>
        ChannelReader<ExceptionEventArgs> ErrorStream { get; }

        /// <summary>
        /// Gets a channel reader for raw session info updates.
        /// </summary>
        ChannelReader<string> RawSessionDataStream { get; }

        /// <summary>
        /// Gets a channel reader for session info updates.
        /// </summary>
        ChannelReader<TelemetrySessionInfo> SessionDataStream { get; }

        /// <summary>
        /// Gets a channel reader for telemetry data updates.
        /// </summary>
        ChannelReader<T> TelemetryDataStream { get; }

        /// <summary>
        /// Retrieves the telemetry variables available for the current session.
        /// </summary>
        /// <returns>A task that represents the asynchronous operation. The task result contains the telemetry variables.</returns>
        Task<IEnumerable<TelemetryVariable>> GetTelemetryVariables();

        /// <summary>
        /// Retrieves the raw telemetry session info in YAML format.
        /// This can be useful if you want to parse the data yourself.
        /// </summary>
        /// <returns>The raw telemetry session info in YAML format.</returns>
        string GetRawTelemetrySessionInfoYaml();

        /// <summary>
        /// Checks if the client is connected to the telemetry server.
        /// </summary>
        /// <returns>True if the client is connected; otherwise, false.</returns>
        bool IsConnected();

        /// <summary>
        /// Monitors the telemetry data and writes data to channels when new data is available.
        /// </summary>
        /// <param name="ct">The cancellation token to cancel the monitoring operation.</param>
        /// <returns>A task that represents the asynchronous monitoring operation.</returns>
        Task<int> Monitor(CancellationToken ct);

        /// <summary>
        /// Pauses channel data writing. Processing continues, but channel writes are suppressed.
        /// </summary>
        void Pause();

        /// <summary>
        /// Resumes channel data writing.
        /// </summary>
        void Resume();
    }
}

